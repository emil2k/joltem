import logging
logger = logging.getLogger('joltem')


def update_config(sender, **kwargs):
    """
    Update gitolite configuration file, when the user or repository sets change
    """
    from django.contrib.auth.models import User
    from git.models import Repository, GITOLITE_CONFIG_PREFIX, GITOLITE_CONFIG_FILE_PATH, git_command, whoami
    logger.info("GITOLITE : UPDATE CONFIG CALLED : %s." % GITOLITE_CONFIG_FILE_PATH)
    whoami()
    with open(GITOLITE_CONFIG_FILE_PATH, 'w') as f:
        f.write("#***************************\n")
        f.write("# Generated by Joltem\n")
        f.write("#***************************\n")
        f.write(GITOLITE_CONFIG_PREFIX)
        repos = Repository.objects.all()
        for repo in repos:
            # Repository permissions
            f.write("repo\t%s\n" % repo.full_name)
            f.write("\tRW+\t=\t@all\n")
            # VREF for solution branch permission
            for user in User.objects.all():
                f.write("\t-\tVREF/UPDATE/%s/%d\t=\t%s\n" % (user.username, repo.id, user.username))
    logger.debug("GITOLITE : Add configuration file.")
    git_command("add -v %s" % GITOLITE_CONFIG_FILE_PATH)
    logger.debug("GITOLITE : Commit configuration file changes.")
    git_command("commit -vm 'Configuration changes.'")
    logger.debug("GITOLITE : Push configuration file changes.")
    git_command("push -v origin master")


def add_key(sender, **kwargs):
    """
    Add key to directory
    """
    import os
    from git.models import GITOLITE_KEY_DIRECTORY, git_command, commit_push, whoami
    if not os.path.exists(GITOLITE_KEY_DIRECTORY):
        os.makedirs(GITOLITE_KEY_DIRECTORY)
    key = kwargs.get('instance')
    logger.info("GITOLITE : ADD KEY CALLED : instance %s" % key)
    whoami()
    file_path = key.file_path
    logger.debug("GITOLITE : Write key to file.")
    with open(file_path, 'w') as f:
        f.write(key.key)
    logger.debug("GITOLITE : Add key file to git.")
    git_command("add %s" % file_path)
    logger.debug("GITOLITE : Commit the addition of key file.")
    commit_push()


def remove_key(sender, **kwargs):
    """
    Remove key from directory
    """
    from os import remove
    from git.models import git_command, commit_push, whoami
    key = kwargs.get('instance')
    logger.info("GITOLITE : REMOVE KEY CALLED : instance %s" % key)
    whoami()
    try:
        file_path = key.file_path
        logger.debug("GITOLITE : Remove file of key : %s" % file_path)
        remove(file_path)
        logger.debug("GITOLITE : Remove key file from git.")
        git_command("rm %s" % file_path)
    except OSError, e:
        logger.error("GITOLITE : Error when removing key : %s" % e)
    logger.debug("GITOLITE : Commit the deletion of key file.")
    commit_push()