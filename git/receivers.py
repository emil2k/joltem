import logging
logger = logging.getLogger('django')


def update_config(sender, **kwargs):
    """
    Update gitolite configuration file, when the user or repository sets change
    """
    from django.contrib.auth.models import User
    from git.models import Repository, GITOLITE_CONFIG_PREFIX, GITOLITE_CONFIG_FILE_PATH, git_command
    # todo tests that this is working
    logger.debug("Update configuration file called : %s." % GITOLITE_CONFIG_FILE_PATH)
    with open(GITOLITE_CONFIG_FILE_PATH, 'w') as f:
        f.write("#***************************\n")
        f.write("# Generated by Joltem\n")
        f.write("#***************************\n")
        f.write(GITOLITE_CONFIG_PREFIX)
        repos = Repository.objects.all()
        for repo in repos:
            # Repository permissions
            f.write("repo\t%s\n" % repo.full_name)
            f.write("\tRW+\t=\t@all\n")
            # VREF for solution branch permission
            for user in User.objects.all():
                f.write("\t-\tVREF/UPDATE/%s/%d\t=\t%s\n" % (user.username, repo.id, user.username))
        logger.debug("Update configuration file called : %s." % GITOLITE_CONFIG_FILE_PATH)
    logger.debug("Add configuration file.")
    git_command("add -v %s" % GITOLITE_CONFIG_FILE_PATH)
    logger.debug("Commit configuration file changes.")
    git_command("commit -vm 'Configuration changes.'")
    logger.debug("Push configuration file changes.")
    git_command("push -v origin master")


def add_key(sender, **kwargs):
    """
    Add key to directory
    """
    import os
    from git.models import GITOLITE_KEY_DIRECTORY, git_command, commit_push
    if not os.path.exists(GITOLITE_KEY_DIRECTORY):
        os.makedirs(GITOLITE_KEY_DIRECTORY)
    key = kwargs.get('instance')
    logger.info("Add key called, instance %s" % key)
    file_path = key.file_path
    with open(file_path, 'w') as f:
        f.write(key.key)
    git_command("add %s" % file_path)
    commit_push()


def remove_key(sender, **kwargs):
    """
    Remove key from directory
    """
    from os import remove
    from git.models import git_command, commit_push
    key = kwargs.get('instance')
    logger.info("Remove key called, instance %s" % key)
    try:
        file_path = key.file_path
        remove(file_path)
        git_command("rm %s" % file_path)
    except OSError, e:
        logger.error(e)
    commit_push()