#!/usr/bin/env python

"""
Update VREF gitolite hook script
takes new commits and places them in database
"""

import os
import sys
dir = os.path.dirname(os.path.realpath(__file__))
os.environ.setdefault("DJANGO_SETTINGS_MODULE", "joltem.settings")

python_paths = os.environ['PYTHONPATH'].split(os.pathsep)

from datetime import datetime
from git.models import Repository, Commit


def save_commit(repository, commit):
    """
    Helper function to store commit in DB
    """
    from datetime import datetime
    commit_time = datetime.fromtimestamp(commit.commit_time+commit.commit_time_offset*60)
    commit = Commit(
        sha=commit.hex,
        repository=repository,
        message=commit.message,
        message_encoding=commit.message_encoding,
        commit_time=commit_time,
        author=commit.author.email,
        committer=commit.committer.email,
    )
    # TODO add parent commits
    commit.save()
    return commit

# Print out command line arguments
with open(dir+'/test.log', "a") as log_file:
    log = lambda line: log_file.write("%s\n" % line)
    args = sys.argv
    script = args.pop(0)
    log("%s : %s : arguments : %s\n" % (datetime.now(), script, ", ".join(args)))
    log("PYTHONPATH")
    for path in python_paths:
        log(path)
    # Get VREF passed arguments
    repository_id = args.pop(7)
    old_sha = args.pop(1)
    new_sha = args.pop(1)
    log("Repository id : %s" % repository_id)
    log("%s..%s" % (old_sha, new_sha))
    repo = Repository.objects.get(id=repository_id)
    log("Loaded repo : %s" % repo.full_name)
    # Load commits
    from pygit2 import Repository as GitRepository, GitError, GIT_SORT_TIME
    git_repo = GitRepository(repo.absolute_path)
    if not git_repo.is_empty:
        # Walk from new sha to old sha
        for commit in git_repo.walk(new_sha, GIT_SORT_TIME):
            if commit.hex == old_sha:
                break
            save_commit(repo, commit)
            log("%s - %s" % (commit.hex, commit.message))
