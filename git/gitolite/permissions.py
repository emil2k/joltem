import os
from joltem.models import User
from git.models import Repository

# Configurations for the gitolite admin repo

prefix = """
#===========================
# Administration
#===========================

repo\tgitolite-admin
\tRW\t=\temil

#===========================
# Repositories
#===========================

"""


def update_permissions():
    """
    Update gitolite permissions
    """
    # Find file paths
    gitolite_admin_directory = os.path.dirname(os.path.realpath(__file__))+"/gitolite-admin/"
    gitolite_conf_file_path = gitolite_admin_directory+"conf/gitolite.conf"
    with open(gitolite_conf_file_path, 'w') as f:
        f.write("#***************************\n")
        f.write("# Generated by Joltem\n")
        f.write("#***************************\n")
        f.write(prefix)
        repos = Repository.objects.all()
        for repo in repos:
            # Repository permissions
            f.write("repo\t%s\n" % repo.full_name)
            f.write("\tRW\t=\t@all\n")
            # Personal branches
            # http://gitolite.com/gitolite/special.html
            f.write("\tRW\tu/USER/\t=\t@all\n")  # TODO move this into update hook
            # VREF for solution branch permission
            for user in User.objects.all():
                f.write("\t-\tVREF/UPDATE/%s/%d\t=\t%s\n" % (user.username, repo.id, user.username))

    print "\n*** Wrote configuration file to %s, is closed : %s.\n" % (gitolite_conf_file_path, f.closed)
    # Commit and push changes
    from subprocess import call
    print "\n*** Commit permission changes\n."
    call("git --git-dir=%s.git --work-tree=%s commit -v -am 'Permission changes.'" % (gitolite_admin_directory, gitolite_admin_directory), shell=True)
    print "\n*** Push permission changes.\n"
    call("git --git-dir=%s.git --work-tree=%s push -v" % (gitolite_admin_directory, gitolite_admin_directory), shell=True)
